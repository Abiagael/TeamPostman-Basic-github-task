{
	"info": {
		"_postman_id": "dd04b4a7-067a-4234-b1e3-f0ee444dbab7",
		"name": "MyAPICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24247631"
	},
	"item": [
		{
			"name": "Get Books Folder",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OKstring\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"}); \r",
									" \r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"console.log(jsonData[0].id)\r",
									"console.log(jsonData[0].name)\r",
									"console.log(jsonData[0].type)\r",
									"console.log(jsonData[0].available)\r",
									"\r",
									"\r",
									"console.log(jsonData[1].id)\r",
									"console.log(jsonData[1].name)\r",
									"console.log(jsonData[1].type)\r",
									"console.log(jsonData[1].available)\r",
									"\r",
									"console.log(jsonData[2].id)\r",
									"console.log(jsonData[2].name)\r",
									"console.log(jsonData[2].type)\r",
									"console.log(jsonData[2].available)\r",
									"\r",
									"console.log(jsonData[3].id)\r",
									"console.log(jsonData[3].name)\r",
									"console.log(jsonData[3].type)\r",
									"console.log(jsonData[3].available)\r",
									"\r",
									" pm.test(\" book id should be 1 under 0\", function () {\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									" pm.test(\" book name should be The Russian under 0\", function () {\r",
									"    pm.expect(jsonData[0].name).to.eql(\"The Russian\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 0\", function () {\r",
									"    pm.expect(jsonData[0].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 0\", function () {\r",
									"    pm.expect(jsonData[0].available).to.eql(true);\r",
									"});\r",
									"\r",
									" pm.test(\" book id should be 3 under 1\", function () {\r",
									"    pm.expect(jsonData[1].id).to.eql(3);\r",
									"});\r",
									" pm.test(\" book name should be The Vanishing Half under 1\", function () {\r",
									"    pm.expect(jsonData[1].name).to.eql(\"The Vanishing Half\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 1\", function () {\r",
									"    pm.expect(jsonData[1].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 1\", function () {\r",
									"    pm.expect(jsonData[1].available).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\" book id should be 4 under 2\", function () {\r",
									"    pm.expect(jsonData[2].id).to.eql(4);\r",
									"});\r",
									" pm.test(\" book name should be The Midnight Library under 2\", function () {\r",
									"    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 2\", function () {\r",
									"    pm.expect(jsonData[2].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 2\", function () {\r",
									"    pm.expect(jsonData[2].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" book id should be 6 under 3\", function () {\r",
									"    pm.expect(jsonData[3].id).to.eql(6);\r",
									"});\r",
									" pm.test(\" book name should be Viscount Who Loved Me under 3\", function () {\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 3\", function () {\r",
									"    pm.expect(jsonData[3].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 3\", function () {\r",
									"    pm.expect(jsonData[3].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.get(\"variable_key\");\r",
									"\r",
									"\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlforbooks}}/books?type=fiction",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books-fiction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OKstring\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"}); \r",
									" \r",
									" \r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"console.log(jsonData[0].id)\r",
									"console.log(jsonData[0].name)\r",
									"console.log(jsonData[0].type)\r",
									"console.log(jsonData[0].available)\r",
									"\r",
									"\r",
									"console.log(jsonData[1].id)\r",
									"console.log(jsonData[1].name)\r",
									"console.log(jsonData[1].type)\r",
									"console.log(jsonData[1].available)\r",
									"\r",
									"console.log(jsonData[2].id)\r",
									"console.log(jsonData[2].name)\r",
									"console.log(jsonData[2].type)\r",
									"console.log(jsonData[2].available)\r",
									"\r",
									"console.log(jsonData[3].id)\r",
									"console.log(jsonData[3].name)\r",
									"console.log(jsonData[3].type)\r",
									"console.log(jsonData[3].available)\r",
									"\r",
									" pm.test(\" book id should be 1 under 0\", function () {\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									" pm.test(\" book name should be The Russian under 0\", function () {\r",
									"    pm.expect(jsonData[0].name).to.eql(\"The Russian\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 0\", function () {\r",
									"    pm.expect(jsonData[0].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 0\", function () {\r",
									"    pm.expect(jsonData[0].available).to.eql(true);\r",
									"});\r",
									"\r",
									" pm.test(\" book id should be 3 under 1\", function () {\r",
									"    pm.expect(jsonData[1].id).to.eql(3);\r",
									"});\r",
									" pm.test(\" book name should be The Vanishing Half under 1\", function () {\r",
									"    pm.expect(jsonData[1].name).to.eql(\"The Vanishing Half\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 1\", function () {\r",
									"    pm.expect(jsonData[1].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 1\", function () {\r",
									"    pm.expect(jsonData[1].available).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\" book id should be 4 under 2\", function () {\r",
									"    pm.expect(jsonData[2].id).to.eql(4);\r",
									"});\r",
									" pm.test(\" book name should be The Midnight Library under 2\", function () {\r",
									"    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 2\", function () {\r",
									"    pm.expect(jsonData[2].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 2\", function () {\r",
									"    pm.expect(jsonData[2].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" book id should be 6 under 3\", function () {\r",
									"    pm.expect(jsonData[3].id).to.eql(6);\r",
									"});\r",
									" pm.test(\" book name should be Viscount Who Loved Me under 3\", function () {\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 3\", function () {\r",
									"    pm.expect(jsonData[3].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 3\", function () {\r",
									"    pm.expect(jsonData[3].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.get(\"variable_key\");\r",
									"\r",
									"\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlforbooks}}/books?type=fiction",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books-invalid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code should be 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an bad request string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"}); \r",
									" \r",
									" \r",
									" \r",
									"/**\r",
									" var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"console.log(jsonData[0].id)\r",
									"console.log(jsonData[0].name)\r",
									"console.log(jsonData[0].type)\r",
									"console.log(jsonData[0].available)\r",
									"\r",
									"\r",
									"console.log(jsonData[1].id)\r",
									"console.log(jsonData[1].name)\r",
									"console.log(jsonData[1].type)\r",
									"console.log(jsonData[1].available)\r",
									"\r",
									"console.log(jsonData[2].id)\r",
									"console.log(jsonData[2].name)\r",
									"console.log(jsonData[2].type)\r",
									"console.log(jsonData[2].available)\r",
									"\r",
									"console.log(jsonData[3].id)\r",
									"console.log(jsonData[3].name)\r",
									"console.log(jsonData[3].type)\r",
									"console.log(jsonData[3].available)\r",
									"\r",
									" pm.test(\" book id should be 1 under 0\", function () {\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									" pm.test(\" book name should be The Russian under 0\", function () {\r",
									"    pm.expect(jsonData[0].name).to.eql(\"The Russian\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 0\", function () {\r",
									"    pm.expect(jsonData[0].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 0\", function () {\r",
									"    pm.expect(jsonData[0].available).to.eql(true);\r",
									"});\r",
									"\r",
									" pm.test(\" book id should be 3 under 1\", function () {\r",
									"    pm.expect(jsonData[1].id).to.eql(3);\r",
									"});\r",
									" pm.test(\" book name should be The Vanishing Half under 1\", function () {\r",
									"    pm.expect(jsonData[1].name).to.eql(\"The Vanishing Half\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 1\", function () {\r",
									"    pm.expect(jsonData[1].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 1\", function () {\r",
									"    pm.expect(jsonData[1].available).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\" book id should be 4 under 2\", function () {\r",
									"    pm.expect(jsonData[2].id).to.eql(4);\r",
									"});\r",
									" pm.test(\" book name should be The Midnight Library under 2\", function () {\r",
									"    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 2\", function () {\r",
									"    pm.expect(jsonData[2].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 2\", function () {\r",
									"    pm.expect(jsonData[2].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" book id should be 6 under 3\", function () {\r",
									"    pm.expect(jsonData[3].id).to.eql(6);\r",
									"});\r",
									" pm.test(\" book name should be Viscount Who Loved Me under 3\", function () {\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"pm.test(\" book type should be fiction under 3\", function () {\r",
									"    pm.expect(jsonData[3].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\" book available should be true under 3\", function () {\r",
									"    pm.expect(jsonData[3].available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" */\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.get(\"variable_key\");\r",
									"\r",
									"\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlforbooks}}/books?type=magical",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "magical"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book folder",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderID = pm.response.json();\r",
									"\r",
									"console.log(OrderID.orderId);\r",
									"pm.environment.set(\"OrderID\", OrderID.orderId);\r",
									"\r",
									"pm.test(\"Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name should have a Created string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{justmeiD}},\n  \"customerName\": \"Agbo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order folder",
			"item": [
				{
					"name": "Get an order with a valid order iD Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Agbo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders/:orderId",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order with invalid orderiD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code name should have an Not Found string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Agbo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders/:orderId",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order with no orderiD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code name has a Not Found string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Agbo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders/:orderId",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order folder",
			"item": [
				{
					"name": "Delete an order with Null Orderid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code name should have content not found string \", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders/:orderId",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have a No Content string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlforbooks}}/orders/:orderId",
							"host": [
								"{{baseurlforbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Todo Entries",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurlforbooks}}/todo",
					"host": [
						"{{baseurlforbooks}}"
					],
					"path": [
						"todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name should have an OK string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"  console.log(jsonData)\r",
							" \r",
							"\r",
							"\r",
							"console.log(jsonData.apiVersion)\r",
							"console.log(jsonData.title)\r",
							"console.log(jsonData.paymentCurrency)\r",
							"\r",
							"console.log(jsonData.categories[0])\r",
							"console.log(jsonData.categories[1])\r",
							"console.log(jsonData.categories[2])\r",
							"console.log(jsonData.categories[3])\r",
							"console.log(jsonData.categories[4])\r",
							"\r",
							"console.log(jsonData.scopes[0])\r",
							"\r",
							"console.log(jsonData.links[0].rel)\r",
							"console.log(jsonData.links[0].href)\r",
							"console.log(jsonData.links[1].rel)\r",
							"console.log(jsonData.links[1].href)\r",
							"console.log(jsonData.links[2].rel)\r",
							"console.log(jsonData.links[2].href)\r",
							"console.log(jsonData.links[3].rel)\r",
							"console.log(jsonData.links[3].href)\r",
							"console.log(jsonData.links[4].rel)\r",
							"console.log(jsonData.links[4].href)\r",
							"console.log(jsonData.links[5].rel)\r",
							"console.log(jsonData.links[5].href)\r",
							"console.log(jsonData.links[6].rel)\r",
							"console.log(jsonData.links[6].href)\r",
							"console.log(jsonData.links[7].rel)\r",
							"console.log(jsonData.links[7].href)\r",
							"console.log(jsonData.links[8].rel)\r",
							"console.log(jsonData.links[8].href)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"apiVersion\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
							"});\r",
							"\r",
							"pm.test(\"title\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
							"});\r",
							"pm.test(\"paymentCurrency\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");\r",
							"});\r",
							"\r",
							"pm.test(\"categories[0]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");\r",
							"});\r",
							"pm.test(\"categories[1]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.categories[1]).to.eql(\"system\");\r",
							"});\r",
							"pm.test(\"categories[2]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.categories[2]).to.eql(\"consumer\");\r",
							"});\r",
							"pm.test(\"categories[3]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.categories[3]).to.eql(\"backend\");\r",
							"});\r",
							"pm.test(\"categories[4]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.categories[4]).to.eql(\"default\");\r",
							"});\r",
							"pm.test(\"scopes[0]\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.scopes[0]).to.eql(\"default\");\r",
							"});\r",
							"pm.test(\"links[0].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[0].rel).to.eql(\"root\");\r",
							"});\r",
							"\r",
							"  pm.test(\"links[0].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[0].href).to.eql(\"https://demo.fusio-project.org/\");\r",
							"});\r",
							" pm.test(\"links[1].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[1].rel).to.eql(\"openapi\");\r",
							"});\r",
							"\r",
							" pm.test(\"links[1].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[1].href).to.eql(\"https://demo.fusio-project.org/system/export/openapi/*/*\");\r",
							"});\r",
							" pm.test(\"links[2].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
							"});\r",
							" pm.test(\"links[2].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[2].href).to.eql(\"https://demo.fusio-project.org/system/doc\");\r",
							"});\r",
							" pm.test(\"links[3].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[3].rel).to.eql(\"route\");\r",
							"});\r",
							" pm.test(\"links[3].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[3].href).to.eql(\"https://demo.fusio-project.org/system/route\");\r",
							"});\r",
							" pm.test(\"links[4].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[4].rel).to.eql(\"health\");\r",
							"});\r",
							" pm.test(\"links[4].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[4].href).to.eql(\"https://demo.fusio-project.org/system/health\");\r",
							"});\r",
							" pm.test(\"links[5].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[5].rel).to.eql(\"jsonrpc\");\r",
							"})\r",
							"pm.test(\"links[5].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[5].href).to.eql(\"https://demo.fusio-project.org/system/jsonrpc\");\r",
							"})\r",
							"\r",
							"pm.test(\"links[6].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[6].rel).to.eql(\"oauth2\");\r",
							"})\r",
							"pm.test(\"links[6].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[6].href).to.eql(\"https://demo.fusio-project.org/authorization/token\");\r",
							"})\r",
							"pm.test(\"links[7].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[7].rel).to.eql(\"whoami\");\r",
							"})\r",
							"pm.test(\"links[7].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[7].href).to.eql(\"https://demo.fusio-project.org/authorization/whoami\");\r",
							"})\r",
							"pm.test(\"links[8].rel\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[8].rel).to.eql(\"about\");\r",
							"})\r",
							"pm.test(\"links[8].href\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.links[8].href).to.eql(\"https://www.fusio-project.org\");\r",
							"})\r",
							"\r",
							"    \r",
							"    \r",
							"\r",
							"\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}",
					"host": [
						"{{baseurl}}"
					]
				},
				"description": "https://demo.fusio-project.org/index.php/"
			},
			"response": []
		},
		{
			"name": "Get entry per ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurlforbooks}}/todo/?todo_id=3",
					"host": [
						"{{baseurlforbooks}}"
					],
					"path": [
						"todo",
						""
					],
					"query": [
						{
							"key": "todo_id",
							"value": "3"
						}
					]
				},
				"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code shoud be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code name should have an OK string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurlforbooks}}/orders",
					"host": [
						"{{baseurlforbooks}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	]
}